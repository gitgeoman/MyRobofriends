{"version":3,"sources":["components/fonts/SEGA.woff","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/errorBoundry.js","containers/App.js","actions.js","constans.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62b48b1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SEGA.12a3db8b.woff\";","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n\treturn(\r\n\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt={`${id}`} src={`https://robohash.org/test${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n//komponent importuje reacta potem importuje inny komponent ktory przetwarza\r\n//przetwarzanie polega na operacji wyswietalnia danych przez funkcję przypisaną do zmiennej CardList\r\n//funckji najpierw robi destrukturyzację danych ktre dostaje od komponentu rodzica.\r\n//potem odlicza po wszystkich obiektach tabeli i \r\n\r\nconst CardList = ({robots})=>{ //{robots} taki zapis to destrukturyzacja oznacza że do obiektu będzie można się odwołać wołając robots a że jest to tablica to potem będzie można go odliczyć\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i)=>{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id}  \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n\treturn (\r\n\t\t<div >\r\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t<div style={{overflow:'scroll', border: 'solid 1px black' , height:'70vh' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1> Oooops. Page is not working :( try later </h1>\r\n\t\t\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js'\r\nimport ErrorBoundry from '../components/errorBoundry.js'\r\n\r\nimport {setSearchField, requestRobots} from '../actions'; \r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField, //calling the reducer atrotribute\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: ()=> dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender(){\r\n\t\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filteredRobots=robots.filter((robot)=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1>Loading</h1>:\r\n\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={ onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n//connct to redux store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constans.js';\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn{\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text}\r\n} //action is a function\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constans.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n} //reducer returns new state its just an object created by copying the old one\r\n\r\n\r\nconst initialStateRobots = {\r\n\tisPending:false,\r\n\trobots:[],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({},state, {isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({},state,{robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({},state, {error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {Provider} from 'react-redux'; // wywołanie redux\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './components/fonts/SEGA.woff';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker'; // nowa funkcja która umozliwia aplikacjom działać szybciej\nimport {searchRobots, requestRobots} from './reducers';//import reduktorów\nimport 'tachyons';\n\n\nconst logger = createLogger(); //calling middleware\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n\t, document.getElementById('root')); \n// w tej linijce jest esencja aplikacji react renderowane są obiekty\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}